
dbbak
=====

This module contains `dbbak`, a simple shell script for managing
full/incremental backup of MySQL with innobackupex.

Currently, the script can handle full and incremental backup of a
single MySQL instance, as well as rotation/purge of a single set
of full+incremental backups.

Database connection and backup store parameters are stored in the
file /etc/dbbak.cfg, with commands/usage as follows.

full backup
-----------

Synopsis: 

    # dbbak full

To create a full backup, run `dbbak full`. This will trigger an
innobackupex full backup run of the configured MySQL instance to
DBBAK_BKDIR/full if no such backup already exists. If the directory
exists, a warning message is printed and the script exits with an
error; see 'backup rotation' for further details about managing
this situation.

Backup details will be logged to DBBAK_BKDIR/full.log.

Setting DBBAK_NOLOCK to any value will imply that innobackupex
should use the '--no-lock' argument; the same setting also applies
to incremental backups.  If DBBAK_NOLOCK is configured, manual
effort should be taken that table structure modifications during
the backup run are properly verified; If this flag is enabled, dbbak
will attempt to detect .frm files modified during the backup run
to assist with this effort.  For details concerning the precise
implications of enabling this argument see the innobackupex and
MySQL documentation.

incremental backup
------------------

Synopsis:

    # dbbak incremental

To create an incremental backup based from the existing full backup
or the most recent subsequent incremental backup, run `dbbak incremental`.

The script will check for the presence of DBBAK_BKDIR/full and
DBBAK_BKDIR/incr.0 through DBBAK_BKDIR/incr.999 in order to determine
the most recent backup to base the incremental on, and proceed using
innobackupex's incremental backup capabilities, storing the backup
in DBBAK_BKDIR/incr.N where N is the value of 1+ the most recent incremental
backup, or 0 in the event that only a full backup is currently available.

If no full or incremental backups are available to use in construction
of the new incremental backup, the script will exit with an error. 

To note, currently, dbbak expects the base full backup to be available
before proceeding with an incremental backup and so will not attempt
to create incremental backups if only previous incrementals are
available in DBBAK_BKDIR. Although this is possible via innobackupex
directly, dbbak was created to explicitly manage a specific backup
policy storing base+incrementals stored in DBBAK_BKDIR and therefore
views such a situation as an administrative error which should be
corrected.

Backup details will be logged to DBBAK_BKDIR/incr.N.log.

backup rotation
---------------

Synopsis:

    # dbbak rotate

To rotate all current full and incremental backups, run `dbbak
incremental`.

Since dbbak views the current full backup and its related incrementals
as a set, the rotation is performed on the entire collection of
existing backups, such that DBBAK_BKDIR/full becomes DBBAK_BKDIR/full.prev,
and the associated incremental backups DBBAK_BKDIR/incr.N become
DBBAK_BKDIR/incr.N.prev, etc. Logfiles are also rotated according
to the same scheme.

The `dbbak` script only manages one rotation of the backup set;
that is to say that at any given time, there can only be the live
backup and the '.prev' copy. If further retention of database backups
is desired, this should be managed via a second-tier backup scheme
of the dbbak backup files.  In accordance with this expectation,
the `dbbak rotate` command will exit with an error if an existing
'.prev' set exists; the `dbbak purge` command discussed below can
be used in this situation to remove the existing previous backup
set and prepare for subsequent rotation.

purging of old backups
----------------------

Synopsis:

    # dbbak purge

To remove the previous backup set from the backup storage area, run
the command `dbbak purge`.

This command removes all .prev backups created via `dbbak rotate`,
and should be used to prepare the backup area for a subsequent
rotation of the active backup set.

