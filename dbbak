#! /bin/sh

usage_exit() {
	echo "usage: $me [full|incremental|ls|restore|rotate|purge]"
	exit 0;
}

cfg_exit() {
	echo "$me: invalid configuration: missing $1";
	exit 1;
}

set_incrs() {
	set -- ${DBBAK_INCRBASE}.[0-9] \
		${DBBAK_INCRBASE}.[0-9][0-9] \
		${DBBAK_INCRBASE}.[0-9][0-9][0-9]

	DBBAK_MAX_INCR='-1'; DBBAK_INCRS='';
	for x; do 
		if [ -d "$x" ]; then
 			id=${x##*.};  # id is trailing digit after '.'
			DBBAK_INCRS="$DBBAK_INCRS $id"
			[ "$id" -gt "$DBBAK_MAX_INCR" ] \
				&& DBBAK_MAX_INCR="$id"
		fi
	done

	DBBAK_CUR_INCR=$((DBBAK_MAX_INCR + 1))
}

set_prevs() {
	set -- ${DBBAK_INCRBASE}.[0-9].prev \
		${DBBAK_INCRBASE}.[0-9][0-9].prev \
		${DBBAK_INCRBASE}.[0-9][0-9][0-9].prev

	DBBAK_MAX_PREV='-1'; DBBAK_PREVS='';
	for x; do 
		if [ -d "$x" ]; then
 			id=${x%.prev}; # zap .prev
 			id=${id##*.}; # get trailing digit
			DBBAK_PREVS="$DBBAK_PREVS $id"
			[ "$id" -gt "$DBBAK_MAX_PREV" ] \
				&& DBBAK_MAX_PREV="$id"
		fi
	done

	DBBAK_CUR_PREV=$((DBBAK_MAX_PREV + 1))
}

parse_cfg() {
	cfg="/etc/${me}.cfg"
	[ ! -f "$cfg" ] && cfg_exit $cfg || . $cfg
	[ -z "${DBBAK_USER}" ] && cfg_exit "DBBAK_USER"
	[ -z "${DBBAK_PASSWORD}" ] && cfg_exit "DBBAK_PASSWORD"
	[ -z "${DBBAK_SOCKET}" ] && cfg_exit "DBBAK_SOCKET"
	[ -z "${DBBAK_DBDIR}" ] && cfg_exit "DBBAK_DBDIR"
	[ -z "${DBBAK_BKDIR}" ] && cfg_exit "DBBAK_BKDIR"
	[ -z "${DBBAK_USER}" ] && cfg_exit "DBBAK_USER"
	[ -z "${DBBAK_GROUP}" ] && cfg_exit "DBBAK_GROUP"
	[ -z "${DBBAK_MODE}" ] && cfg_exit "DBBAK_MODE"
	[ ! -z "${DBBAK_NOLOCK}" ] && DBBAK_NOLOCK="--no-lock"
	[ ! -z "${DBBAK_RESTORE_MEM}" ] \
		&& DBBAK_RESTORE_MEM="--use-memory=$DBBAK_RESTORE_MEM" \
		|| DBBAK_RESTORE_MEM=""

	DBBAK_FULL="${DBBAK_BKDIR}/full"
	DBBAK_FULL_LOG="${DBBAK_FULL}.log"
	DBBAK_FULL_STAMP="${DBBAK_FULL}.stamp"

	DBBAK_PREV="${DBBAK_BKDIR}/full.prev"
	BBAK_PREV_LOG="${DBBAK_PREV}.log"
	DBBAK_PREV_STAMP="${DBBAK_PREV}.stamp"

	DBBAK_INCRBASE="${DBBAK_BKDIR}/incr"
	set_incrs;

	DBBAK_INCR="${DBBAK_INCRBASE}.${DBBAK_CUR_INCR}"
	DBBAK_INCR_LOG="${DBBAK_INCR}.log"
	DBBAK_INCR_STAMP="${DBBAK_INCR}.stamp"

	DBBAK_START="`date '+%s'`"
}

show_cfg() {
	echo "# ${me} parsed/applied config:"
	echo "# DBBAK_USER=${DBBAK_USER}"
	echo "# DBBAK_SOCKET=${DBBAK_SOCKET}"
	echo "# DBBAK_DBDIR=${DBBAK_DBDIR}"
	echo "# DBBAK_BKDIR=${DBBAK_BKDIR}"
	echo "# DBBAK_USER=${DBBAK_USER}"
	echo "# DBBAK_GROUP=${DBBAK_GROUP}"
	echo "# DBBAK_MODE=${DBBAK_MODE}"
	echo "# DBBAK_NOLOCK=${DBBAK_NOLOCK}"
	echo "# DBBAK_RESTORE_MEM=${DBBAK_RESTORE_MEM}"
	echo "# DBBAK_START=${DBBAK_START}"
}

do_countdown() {
	if [ -t 0 ]; then  # countdown only for interactive
		echo "Warning!: $me $* proceeding in 5 seconds."
		echo ".. interrupt (^C) to cancel."
		for x in 5 4 3 2 1; do
			echo -n "..${x}";
			sleep 1;
		done
		echo "..ok!";
	fi
}

cmd_full() {
	# todo: check for previous full
	if [ -d ${DBBAK_FULL} ]; then
		echo "$me: full backup present in ${DBBAK_FULL}; exiting."
		exit 1;
	fi
	echo -n "$me: saving full backup to ${DBBAK_FULL}: "

	echo "# dbbak full run" > ${DBBAK_FULL_LOG} 2>&1;
	show_cfg >> ${DBBAK_FULL_LOG} 2>&1;	

	echo ${DBBAK_START} > ${DBBAK_FULL_STAMP};

	innobackupex \
		--user=${DBBAK_USER} \
		--password=${DBBAK_PASSWORD} \
		--socket=${DBBAK_SOCKET} \
		${DBBAK_NOLOCK} \
		--no-timestamp ${DBBAK_FULL} >> ${DBBAK_FULL_LOG} 2>&1;

	return=$?
	tail -n 1 ${DBBAK_FULL_LOG} |grep -q 'completed OK'
	status=$?

	if [ "$return" -ne "0" -a "$status" -ne "0" ]; then
		echo "ERROR!"
		echo "backup error returned or did not report 'completed OK'!"
		echo "... last 10 lines of log as follows:"
		tail -n 10 ${DBBAK_FULL_LOG}
		exit $return;
	else
		echo "ok."
	fi

	if [ ! -z "${DBBAK_NOLOCK}" ]; then
		echo "# ${me} stamp file:" 2>&1 |tee -a ${DBBAK_FULL_LOG};
		ls -l ${DBBAK_FULL_STAMP} 2>&1 |tee -a ${DBBAK_FULL_LOG};

		echo "# tables possibly modified during run:" \
			2>&1 |tee -a ${DBBAK_FULL_LOG};
		find ${DBBAK_DBDIR} -type f -name '*.frm' \
			-newer ${DBBAK_FULL_STAMP} -exec ls -l {} \; \
			2>&1 |tee -a ${DBBAK_FULL_LOG};
		echo "# ok." 2>&1 |tee -a ${DBBAK_FULL_LOG};
	fi
}

cmd_incremental() {

	if [ ! -d ${DBBAK_FULL} ]; then
		echo "$me: no full backup present in ${DBBAK_FULL}."
		echo "$me: please run '$me full' before proceeding."
		echo "$me: exiting."
		exit 1;
	fi

	if [ "${DBBAK_MAX_INCR}" -eq "-1" ]; then
		DBBAK_LAST="${DBBAK_FULL}"
	else
		DBBAK_LAST="${DBBAK_INCRBASE}.${DBBAK_MAX_INCR}"
	fi

	echo -n "$me: incremental backup ${DBBAK_LAST} to ${DBBAK_INCR}: "

	echo "# dbbak incremental run" > ${DBBAK_INCR_LOG} 2>&1;
	show_cfg >> ${DBBAK_INCR_LOG} 2>&1;	
	echo "# DBBAK_LAST=${DBBAK_LAST}" >> ${DBBAK_INCR_LOG} 2>&1;	
	echo "# DBBAK_INCR=${DBBAK_INCR}" >> ${DBBAK_INCR_LOG} 2>&1;	

	echo ${DBBAK_START} > ${DBBAK_INCR_STAMP};

	innobackupex \
		--user=${DBBAK_USER} \
		--password=${DBBAK_PASSWORD} \
		--socket=${DBBAK_SOCKET} \
		${DBBAK_NOLOCK} \
		--no-timestamp \
		--incremental-basedir=${DBBAK_LAST} \
		--incremental ${DBBAK_INCR} \
		>> ${DBBAK_INCR_LOG} 2>&1

	return=$?
	tail -n 1 ${DBBAK_INCR_LOG} |grep -q 'completed OK'
	status=$?

	if [ "$return" -ne "0" -a "$status" -ne "0" ]; then
		echo "ERROR!"
		echo "backup error returned or did not report 'completed OK'!"
		echo "... last 10 lines of log as follows:"
		tail -n 10 ${DBBAK_INCR_LOG}
		exit $return;
	else
		echo "ok."
	fi

	if [ ! -z "${DBBAK_NOLOCK}" ]; then
		echo "# ${me} stamp file:" 2>&1 |tee -a ${DBBAK_INCR_LOG};
		ls -l ${DBBAK_INCR_STAMP} 2>&1 |tee -a ${DBBAK_INCR_LOG};

		echo "# tables possibly modified during run:" \
			2>&1 |tee -a ${DBBAK_INCR_LOG};
		find ${DBBAK_DBDIR} -type f -name '*.frm' \
			-newer ${DBBAK_FULL_STAMP} -exec ls -l {} \; \
			2>&1 |tee -a ${DBBAK_INCR_LOG};
		echo "# ok." 2>&1 |tee -a ${DBBAK_INCR_LOG};
	fi
}

cmd_ls() {
	args="-lart"
	[ "$#" -gt "0" ] && args="-dlart"
	echo "contents of ${DBBAK_BKDIR}:"
	(cd ${DBBAK_BKDIR} && ls $args $*)
}

cmd_restore() {

	#
	# ensure db is shutdown
	#

	mysqladmin -S ${DBBAK_SOCKET} status >/dev/null 2>&1;
	if [ "$?" -eq "0" ]; then
		echo "$me: error: mysqld detected on socket ${DBBAK_SOCKET}."
		echo "$me: restore can only run on stopped instances."
		echo "$me: please verify host & stop server before proceeding."
		echo "$me: exiting."
		exit 1;
	fi

	#
	# locate available backups
	#
	# TODO: skip detection process if arg given

	set_incrs; set_prevs;

	base=""; # determine latest full backup
	for d in ${DBBAK_PREV} ${DBBAK_FULL}; do
	
		# should exist, be a directory, and the newest available.	
		[ -d "${d}" ] || continue;
		[ -z "${base}" ] && [ -d "${d}" ] && base="$d";
		[ "${base}" != "${d}" ] && [ "${d}" -nt "${base}" ] \
			&& base="$d";

	done

	if [ -z "${base}" ]; then
		echo "$me: no backups available for restore. exiting."
		exit 1;
	fi

 	if [ "${base}" = "${DBBAK_FULL}" ]; then
 		nincr="${DBBAK_MAX_INCR}"
 		prev=""
 	else
 		nincr="${DBBAK_MAX_PREV}"
 		prev=".prev"
 	fi

	echo "$me: restore job on `hostname` at `date`"
	show_cfg;

	[ "$nincr" -eq "-1" ] && src=$base \
		|| src=${DBBAK_INCRBASE}.${nincr}${prev}

	echo "$me: will restore from ${src}"

	#
	# remove exisitng database
	#

	if [ -t 0 ]; then
		shibboleth="ALL YOUR BASE ARE BELONG TO US";

		echo "Warning!!!: Restore *DESTROYS* current databases!!!";
		echo "Please enter '$shibboleth'"
		echo "if you are *COMPLETELY SURE* you want to proceed."
		read response;

		if [ "$response" != "$shibboleth" ]; then 
			echo "restore aborted - response incorrect." 
			exit 1;
		fi
	fi

	echo "$me: path to be destroyed is: '${DBBAK_DBDIR}'"

	#
	# wipe/restore base full backup
	#

	do_countdown "wipe/recreate of ${DBBAK_DBDIR}"

	echo "$me: copying full backup"
	rsync -avHS --delete ${base}/ ${DBBAK_DBDIR}/
	echo "$me: appyling logs to full backup"
	innobackupex ${DBBAK_RESTORE_MEM} \
		--apply-log --redo-only ${DBBAK_DBDIR}/

	# 
	# restore incremental backups
	# 

 	if [ "$src" -ne "$base" ]; then
 		inc=0;
 		while [ "$inc" -le "$nincr" ]; do
 			echo "$me: restore incremental $inc of $nincr"
 			innobackupex ${DBBAK_RESTORE_MEM} \
 				--apply-log --redo-only ${DBBAK_DBDIR}/ \
 				--incremental-dir=${DBBAK_INCRBASE}.${inc}${prev}
 			inc=$((inc + 1))
 		done
 	fi

 	# apply final logs
	echo "$me: appyling final logs"
	innobackupex --apply-log ${DBBAK_DBDIR}/

	# set perms (implies perm settings in cfg)
	echo "$me: setting permissions"
	chown -R ${DBBAK_USER}:${DBBAK_GROUP} ${DBBAK_DBDIR}/
	chmod ${DBBAK_MODE} ${DBBAK_DBDIR}/
	echo "$me: done"
}

cmd_rotate() {
	if [ ! -d ${DBBAK_FULL} ]; then
		echo "$me: no full backup present in ${DBBAK_FULL}."
		echo "$me: please run '$me full' before proceeding."
		echo "$me: exiting."
		exit 1;
	fi
	if [ -d ${DBBAK_PREV} ]; then
		echo "$me: previous backup present in ${DBBAK_PREV}."
		echo "$me: please run '$me purge' before proceeding."
		echo "$me: exiting."
		exit 1;
	fi

	do_countdown "rotate";

	for incr in ${DBBAK_INCRS}; do
		DBBAK_ROTATE="${DBBAK_INCRBASE}.${incr}";
		DBBAK_ROTATE_PREV="${DBBAK_INCRBASE}.${incr}.prev";

		DBBAK_ROTATE_LOG="${DBBAK_INCRBASE}.${incr}.log";
		DBBAK_ROTATE_PREV_LOG="${DBBAK_INCRBASE}.${incr}.log.prev";

		DBBAK_ROTATE_STAMP="${DBBAK_INCRBASE}.${incr}.stamp";
		DBBAK_ROTATE_PREV_STAMP="${DBBAK_INCRBASE}.${incr}.stamp.prev";

		echo -n "$me: moving ${DBBAK_ROTATE} to ${DBBAK_ROTATE_PREV}: "
		mv ${DBBAK_ROTATE} ${DBBAK_ROTATE_PREV}
		[ "$?" -eq "0" ] && echo "ok." || echo "ERROR!"

		echo -n "$me: moving ${DBBAK_ROTATE_LOG} to ${DBBAK_ROTATE_PREV_LOG}: "
		mv ${DBBAK_ROTATE_LOG} ${DBBAK_ROTATE_PREV_LOG}
		[ "$?" -eq "0" ] && echo "ok." || echo "ERROR!"

		echo -n "$me: moving ${DBBAK_ROTATE_STAMP} to ${DBBAK_ROTATE_PREV_STAMP}: "
		mv ${DBBAK_ROTATE_STAMP} ${DBBAK_ROTATE_PREV_STAMP}
		[ "$?" -eq "0" ] && echo "ok." || echo "ERROR!"
	done

	echo -n "$me: moving ${DBBAK_FULL} to ${DBBAK_PREV}: "
	mv ${DBBAK_FULL} ${DBBAK_PREV}
	[ "$?" -eq "0" ] && echo "ok." || echo "ERROR!"

	echo -n "$me: moving ${DBBAK_FULL_LOG} to ${DBBAK_PREV_LOG}: "
	mv ${DBBAK_FULL_LOG} ${DBBAK_PREV_LOG}
	[ "$?" -eq "0" ] && echo "ok." || echo "ERROR!"

	echo -n "$me: moving ${DBBAK_FULL_STAMP} to ${DBBAK_PREV_STAMP}: "
	mv ${DBBAK_FULL_STAMP} ${DBBAK_PREV_STAMP}
	[ "$?" -eq "0" ] && echo "ok." || echo "ERROR!"

}

cmd_purge() {
	if [ ! -d ${DBBAK_PREV} ]; then
		echo "$me: nothing to purge in in ${DBBAK_PREV}."
		echo "$me: please run '$me rotate' before proceeding."
		echo "$me: exiting."
		exit 1;
	fi

	do_countdown "purge";

	set_prevs;

	for incr in ${DBBAK_PREVS}; do
		echo "PREV: ${prev}"
		DBBAK_ROTATE_PREV="${DBBAK_INCRBASE}.${incr}.prev";
		DBBAK_ROTATE_PREV_LOG="${DBBAK_INCRBASE}.${incr}.log.prev";
		DBBAK_ROTATE_PREV_STAMP="${DBBAK_INCRBASE}.${incr}.stamp.prev";
		echo -n "$me: removing ${DBBAK_ROTATE_PREV} ${DBBAK_ROTATE_PREV_LOG} ${DBBAK_ROTATE_PREV_STAMP}: "
		rm -rf ${DBBAK_ROTATE_PREV} ${DBBAK_ROTATE_PREV_LOG} ${DBBAK_ROTATE_PREV_STAMP}
		[ "$?" -eq "0" ] && echo "ok." || echo "ERROR!"
	done

	echo -n "$me: removing ${DBBAK_PREV} ${DBBAK_PREV_LOG} ${DBBAK_PREV_STAMP}: "
	rm -rf ${DBBAK_PREV} ${DBBAK_PREV_LOG} ${DBBAK_PREV_STAMP}
	[ "$?" -eq "0" ] && echo "ok." || echo "ERROR!"
}


# _start:
me="`basename $0`"
if [ "$#" -lt "1" ]; then
	usage_exit;
fi

verb=$1; shift;
case $verb in
	"full") parse_cfg; cmd_full;;
	"incremental") parse_cfg; cmd_incremental;;
	"ls") parse_cfg; cmd_ls $*;;
	"restore") parse_cfg; cmd_restore $*;;
	"rotate") parse_cfg; cmd_rotate;;
	"purge") parse_cfg; cmd_purge;;
	*) usage_exit;;
esac
