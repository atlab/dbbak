#! /bin/sh

PATH="/sbin:/bin:"
PATH="${PATH}:/usr/sbin:/usr/bin:"
PATH="${PATH}:/usr/local/sbin:/usr/local/bin:"
export PATH;

usage_exit() {
	echo "$me usage:"
	echo ""
	echo "  xtrabackup commands:"
	echo ""
	echo "    $me [full|incremental|ls|stat|trap|restore|rotate|purge]"
	echo ""
	echo "  lvm snapshot commands:"
	echo ""
	echo "    $me [lvmsnap|lvmls|lvmpurge]"
	echo ""
	exit 0;
}

cfg_exit() {
	echo "$me: invalid configuration: missing $1" >&2;
	exit 1;
}

cfg_warn() {
	echo "$me: note: missing $1" >&2;
}

err_exit() {
	echo "$*";
	exit 1;
}

set_incrs() {

	#
	# set current set incremental variables
	#

	set -- ${DBBAK_CUR_INCRBASE}.[0-9] \
		${DBBAK_CUR_INCRBASE}.[0-9][0-9] \
		${DBBAK_CUR_INCRBASE}.[0-9][0-9][0-9]

	DBBAK_CUR_MAX_INCR_NO='-1'; DBBAK_CUR_INCR_NOS='';
	for x; do 
		if [ -d "$x" ]; then
 			id=${x##*.};  # id is trailing digit after '.'
			DBBAK_CUR_INCR_NOS="$DBBAK_CUR_INCR_NOS $id"
			[ "$id" -gt "$DBBAK_CUR_MAX_INCR_NO" ] \
				&& DBBAK_CUR_MAX_INCR_NO="$id"
		fi
	done

	DBBAK_CUR_INCR_NO=$((DBBAK_CUR_MAX_INCR_NO + 1))

	DBBAK_CUR_INCR="${DBBAK_CUR_INCRBASE}.${DBBAK_CUR_INCR_NO}"
	DBBAK_CUR_INCR_LOG="${DBBAK_CUR_INCR}.log"
	DBBAK_CUR_INCR_STAMP="${DBBAK_CUR_INCR}.stamp"

        if [ "${DBBAK_CUR_MAX_INCR_NO}" -eq "-1" ]; then
                DBBAK_CUR_LAST="${DBBAK_CUR_FULL}"
        else
                DBBAK_CUR_LAST="${DBBAK_CUR_INCRBASE}.${DBBAK_CUR_MAX_INCR_NO}"
        fi

	#
	# set previous set incremental variables
	#

	set -- ${DBBAK_PREV_INCRBASE}.[0-9] \
		${DBBAK_PREV_INCRBASE}.[0-9][0-9] \
		${DBBAK_PREV_INCRBASE}.[0-9][0-9][0-9]

	DBBAK_PREV_MAX_INCR_NO='-1'; DBBAK_PREV_INCR_NOS='';
	for x; do 
		if [ -d "$x" ]; then
 			id=${x##*.};  # id is trailing digit after '.'
			DBBAK_PREV_INCR_NOS="$DBBAK_PREV_INCR_NOS $id"
			[ "$id" -gt "$DBBAK_PREV_MAX_INCR_NO" ] \
				&& DBBAK_PREV_MAX_INCR_NO="$id"
		fi
	done

	DBBAK_PREV_INCR_NO=$((DBBAK_PREV_MAX_INCR_NO + 1))

}


set_lvsnaps() {

	DBBAK_LVM_BASE="${DBBAK_LVM_SNAP_VG}/${DBBAK_LVM_SNAP_LV}"

	set -- ${DBBAK_LVM_BASE}-s[0-9] \
		${DBBAK_LVM_BASE}-s[0-9][0-9] \
		${DBBAK_LVM_BASE}-s[0-9][0-9][0-9];

	DBBAK_LVM_MAX_SNAP_NO='-1'; DBBAK_LVM_SNAP_NOS='';

	for x; do
		if [ -b "${x}" ]; then
			id=${x##*-s};  # id is trailing digits after '-s'
			DBBAK_LVM_SNAP_NOS="$DBBAK_LVM_SNAP_NOS $id"

			[ "$id" -gt "$DBBAK_LVM_MAX_SNAP_NO" ] \
				&& DBBAK_LVM_MAX_SNAP_NO="$id"
		fi
	done

	DBBAK_LVM_SNAP_NO=$((DBBAK_LVM_MAX_SNAP_NO + 1))
	DBBAK_LVM_SNAP="${DBBAK_LVM_BASE}-s${DBBAK_LVM_SNAP_NO}"
}


parse_cfg() {
	cfg="/etc/${me}.cfg"
	[ ! -f "$cfg" ] && cfg_exit $cfg || . $cfg
	[ -z "${DBBAK_USER}" ] && cfg_exit "DBBAK_USER"
	[ -z "${DBBAK_PASSWORD}" ] && cfg_warn "DBBAK_PASSWORD"
	[ -z "${DBBAK_SOCKET}" ] && cfg_exit "DBBAK_SOCKET"
	[ -z "${DBBAK_DBDIR}" ] && cfg_exit "DBBAK_DBDIR"
	[ -z "${DBBAK_BKDIR}" ] && cfg_exit "DBBAK_BKDIR"
	[ -z "${DBBAK_OWNER}" ] && cfg_exit "DBBAK_OWNER"
	[ -z "${DBBAK_GROUP}" ] && cfg_exit "DBBAK_GROUP"
	[ -z "${DBBAK_MODE}" ] && cfg_exit "DBBAK_MODE"

	# optional, so no warning	

	[ ! -z "${DBBAK_NTHREAD}" ] \
		&& DBBAK_NTHREAD="--parallel=${DBBAK_NTHREAD}"
	[ ! -z "${DBBAK_NOLOCK}" ] && DBBAK_NOLOCK="--no-lock"
	[ ! -z "${DBBAK_RESTORE_MEM}" ] \
		&& DBBAK_RESTORE_MEM="--use-memory=$DBBAK_RESTORE_MEM" \
		|| DBBAK_RESTORE_MEM=""
	[ ! -z "${DBBAK_SLAVE}" ] \
		&& DBBAK_SLAVE="--safe-slave-backup --slave-info"

	# TODO: LVM SNAP
	[ -z "${DBBAK_LVM_SNAP}" ] && DBBAK_LVM_SNAP=''
	[ -z "${DBBAK_LVM_SNAP_VG}" ] && DBBAK_LVM_SNAP_VG=''
	[ -z "${DBBAK_LVM_SNAP_LV}" ] && DBBAK_LVM_SNAP_LV=''
	[ -z "${DBBAK_LVM_SNAP_NS}" ] && DBBAK_LVM_SNAP_NS=0
	[ -z "${DBBAK_LVM_SNAP_SZ}" ] && DBBAK_LVM_SNAP_NS=''
	# FIXME: check snap ^ nolock; error
#	[ ! -z "${DBBAK_NOLOCK}" -a ! -z "${DBBAK_LVM_SNAP}" ] \
#		&& err_exit "options DBBAK_NOLOCK and DBBAK_LVM_SNAP conflict."

	# TODO: check snap sub-parms are logical

	[ -z "${DBBAK_MONITOR_SERVER}" ] && DBBAK_MONITOR_SERVER=''
	[ -z "${DBBAK_MONITOR_NAME}" ] && DBBAK_MONITOR_NAME=''

	DBBAK_CUR="${DBBAK_BKDIR}/cur"
	DBBAK_CUR_FULL="${DBBAK_BKDIR}/cur/full"
	DBBAK_CUR_FULL_LOG="${DBBAK_CUR_FULL}.log"
	DBBAK_CUR_FULL_STAMP="${DBBAK_CUR_FULL}.stamp"
	DBBAK_CUR_INCRBASE="${DBBAK_CUR}/incr"

	DBBAK_PREV="${DBBAK_BKDIR}/prev"
	DBBAK_PREV_FULL="${DBBAK_BKDIR}/prev/full"
	DBBAK_PREV_FULL_LOG="${DBBAK_PREV_FULL}.log"
	DBBAK_PREV_FULL_STAMP="${DBBAK_PREV_FULL}.stamp"
	DBBAK_PREV_INCRBASE="${DBBAK_PREV}/incr"
	set_incrs;

	DBBAK_START="`date '+%s'`"
}

show_cfg() {
	echo "# ${me} parsed/applied config:"
	echo "# DBBAK_USER=${DBBAK_USER}"
	echo "# DBBAK_SOCKET=${DBBAK_SOCKET}"
	echo "# DBBAK_DBDIR=${DBBAK_DBDIR}"
	echo "# DBBAK_BKDIR=${DBBAK_BKDIR}"
	echo "# DBBAK_OWNER=${DBBAK_OWNER}"
	echo "# DBBAK_GROUP=${DBBAK_GROUP}"
	echo "# DBBAK_MODE=${DBBAK_MODE}"
	echo "# DBBAK_NOLOCK=${DBBAK_NOLOCK}"
	echo "# DBBAK_NTHREAD=${DBBAK_NTHREAD}"
	echo "# DBBAK_RESTORE_MEM=${DBBAK_RESTORE_MEM}"
	echo "# DBBAK_SLAVE=${DBBAK_SLAVE}"
	echo "# DBBAK_START=${DBBAK_START}"
}

do_countdown() {
	if [ -t 0 ]; then  # countdown only for interactive
		echo "Warning!: $me $* proceeding in 5 seconds."
		echo ".. interrupt (^C) to cancel."
		for x in 5 4 3 2 1; do
			echo -n "..${x}";
			sleep 1;
		done
		echo "..ok!";
	fi
}

cmd_full() {
	
	[ -d ${DBBAK_CUR_FULL} ] \
		&& err_exit "$me: backup exists in ${DBBAK_FULL}. exiting."

	echo -n "$me: saving full backup to ${DBBAK_CUR_FULL}: "

	if [ ! -d "${DBBAK_CUR}" ]; then
		mkdir ${DBBAK_CUR} \
		|| err_exit "$me: problem creating ${DBBAK_CUR}. exiting.";
	fi

	echo "# dbbak full run" > ${DBBAK_CUR_FULL_LOG} 2>&1;
	show_cfg >> ${DBBAK_CUR_FULL_LOG} 2>&1;

	echo ${DBBAK_START} > ${DBBAK_CUR_FULL_STAMP};

	innobackupex \
		--user=${DBBAK_USER} \
		--password=${DBBAK_PASSWORD} \
		--socket=${DBBAK_SOCKET} \
		${DBBAK_NOLOCK} \
		${DBBAK_NTHREAD} \
		${DBBAK_SLAVE} \
		--no-timestamp ${DBBAK_CUR_FULL} >> ${DBBAK_CUR_FULL_LOG} 2>&1;

	return=$?
	tail -n 1 ${DBBAK_CUR_FULL_LOG} |grep -q 'completed OK'
	status=$?

	if [ "$return" -ne "0" -a "$status" -ne "0" ]; then
		echo "ERROR!"
		echo "backup error returned or did not report 'completed OK'!"
		echo "... last 10 lines of log as follows:"
		tail -n 10 ${DBBAK_CUR_FULL_LOG}
		exit $return;
	else
		echo "ok."
	fi

	if [ ! -z "${DBBAK_NOLOCK}" ]; then
		echo "# ${me} stamp file:" 2>&1 |tee -a ${DBBAK_CUR_FULL_LOG};
		ls -l ${DBBAK_CUR_FULL_STAMP} 2>&1 |tee -a ${DBBAK_CUR_FULL_LOG};

		echo "# tables possibly modified during run:" \
			2>&1 |tee -a ${DBBAK_CUR_FULL_LOG};
		echo "# (cross check timestamps to .frm copy output above)" \
			2>&1 |tee -a ${DBBAK_CUR_FULL_LOG};
		find ${DBBAK_DBDIR} -type f -name '*.frm' \
			-newer ${DBBAK_CUR_FULL_STAMP} -exec ls -l {} \; \
			2>&1 |tee -a ${DBBAK_CUR_FULL_LOG};
		echo "# ok." 2>&1 |tee -a ${DBBAK_CUR_FULL_LOG};
	fi
}

cmd_incremental() {

	if [ ! -d ${DBBAK_CUR_FULL} ]; then
		echo "$me: no full backup present in ${DBBAK_CUR_FULL}."
		echo "$me: please run '$me full' before proceeding."
		echo "$me: exiting."
		exit 1;
	fi

	echo -n "$me: incremental: ${DBBAK_CUR_LAST} to ${DBBAK_CUR_INCR}: ";

	echo "# $me incremental run" > ${DBBAK_CUR_INCR_LOG} 2>&1;
	show_cfg >> ${DBBAK_CUR_INCR_LOG} 2>&1;	
	echo "# DBBAK_CUR_LAST=${DBBAK_CUR_LAST}" >> ${DBBAK_CUR_INCR_LOG} 2>&1;
	echo "# DBBAK_CUR_INCR=${DBBAK_CUR_INCR}" >> ${DBBAK_CUR_INCR_LOG} 2>&1;	
	echo ${DBBAK_START} > ${DBBAK_CUR_INCR_STAMP};

	innobackupex \
		--user=${DBBAK_USER} \
		--password=${DBBAK_PASSWORD} \
		--socket=${DBBAK_SOCKET} \
		${DBBAK_NOLOCK} \
		${DBBAK_NTHREAD} \
		${DBBAK_SLAVE} \
		--no-timestamp \
		--incremental-basedir=${DBBAK_CUR_LAST} \
		--incremental ${DBBAK_CUR_INCR} \
		>> ${DBBAK_CUR_INCR_LOG} 2>&1

	return=$?
	tail -n 1 ${DBBAK_CUR_INCR_LOG} |grep -q 'completed OK'
	status=$?

	if [ "$return" -ne "0" -a "$status" -ne "0" ]; then
		echo "ERROR!"
		echo "backup error returned or did not report 'completed OK'!"
		echo "... last 10 lines of log as follows:"
		tail -n 10 ${DBBAK_CUR_INCR_LOG}
		exit $return;
	else
		echo "ok."
	fi

	if [ ! -z "${DBBAK_NOLOCK}" ]; then
		echo "# ${me} stamp file:" 2>&1 |tee -a ${DBBAK_CUR_INCR_LOG};

		ls -l ${DBBAK_CUR_INCR_STAMP} 2>&1 \
			|tee -a ${DBBAK_CUR_INCR_LOG};

		echo "# tables possibly modified during run:" \
			2>&1 |tee -a ${DBBAK_CUR_INCR_LOG};
		echo "# (cross check timestamps to .frm copy output above)" \
			2>&1 |tee -a ${DBBAK_CUR_INCR_LOG};

		find ${DBBAK_DBDIR} -type f -name '*.frm' \
			-newer ${DBBAK_CUR_INCR_STAMP} -exec ls -l {} \; \
			2>&1 |tee -a ${DBBAK_CUR_INCR_LOG};

		echo "# ok." 2>&1 |tee -a ${DBBAK_CUR_INCR_LOG};
	fi
}


cmd_lvmsnap(){
        set_lvsnaps;

	lckf="/tmp/dbbak.dblock.lock";
	if [ -f "${lckf}" ]; then
		err_exit "lvsnap lockfile ${lckf} exists. exiting.";
	fi

	# lock the db & flush data
	( mysql -S ${DBBAK_SOCKET} -e "
		flush tables with read lock;
		select 'db locked' into outfile '${lckf}';
		select sleep(30);
		unlock tables;";
	  sync; sync; sync;
	) > /dev/null 2>&1 &

	# and make the snapshot

        echo -n "# $me: creating snapshot ${DBBAK_LVM_SNAP}: "

        DBBAK_LVM_SNAP_STATUS=""  # XXX/TODO: break infinite loop?
	while [ -z "${DBBAK_LVM_SNAP_STATUS}" ]; do
		if [ -f "${lckf}" ]; then
			DBBAK_LVM_SNAP_OUT=`lvcreate -s ${DBBAK_LVM_BASE} \
				-n ${DBBAK_LVM_SNAP} \
				-L ${DBBAK_LVM_SNAP_SZ} 2>&1`
			DBBAK_LVM_SNAP_STATUS=$?
			rm -f ${lckf}
		fi
		sleep 1;
	done

        [ "${DBBAK_LVM_SNAP_STATUS}" -eq "0" ] \
		&& echo "ok." || echo "ERROR!: ${DBBAK_LVM_SNAP_OUT}"

        return ${DBBAK_LVM_SNAP_STATUS}
}


cmd_lvmls() {
	set_lvsnaps;
	devlist="${DBBAK_LVM_BASE}"
	for l in ${DBBAK_LVM_SNAP_NOS}; do
		devlist="${devlist} ${DBBAK_LVM_BASE}-s${l}"
	done
	lvs $devlist
	return $?
}


cmd_lvmpurge(){

	status=0

	set_lvsnaps;

	echo -n "# $me: removing LVM snapshots:"

	# partition snaps into keep and remove lists by DBBAK_LVM_SNAP_NS
	i=0; keeplist=""; zaplist=""
	for s in `echo ${DBBAK_LVM_SNAP_NOS} | rev`; do
		if [ "$i" -lt "$DBBAK_LVM_SNAP_NS" ]; then
			keeplist="${keeplist} ${s}"
		else
			zaplist="${zaplist} ${s}"
		fi
		i=$((i + 1))
	done

	if [ -z "$zaplist" ]; then
		echo " ok. no cleanup needed."
		return 0;
	fi

	echo ""
	echo "# .. will remove:${zaplist}"
	for z in $zaplist; do  # remove remove snaps
		echo -n "# .. removing $z: "
		out=`lvremove -f ${DBBAK_LVM_BASE}-s${z} 2>&1`; outv=$?

		[ "$outv" -eq "0" ] && echo "ok." || echo "ERROR!: ${renameout}"
		status=$((status + $outv))
	done

	nk=0  # renumber remaining snaps
	for k in `echo $keeplist|rev`; do
		if [ "$k" -eq "$nk" ]; then  # numbers line up - no rotation
			nk=$((nk + 1)); continue
		fi

		echo -n "# .. renaming $k to $nk: "
		out=`lvrename ${DBBAK_LVM_BASE}-s${k} \
			${DBBAK_LVM_BASE}-s${nk} 2>&1`; outv=$?

		[ "$outv" -eq "0" ] && echo "ok." || echo "ERROR!: ${renameout}"
		status=$((status + $outv))
		nk=$((nk + 1))
	done

	[ "$status" -eq "0" ] && echo "# .. ok." || echo "# .. ERROR!"
	return $status;

}

cmd_ls() {
	echo "Backups in ${DBBAK_BKDIR}:"
	( cd ${DBBAK_BKDIR} \
		&& ls -dlart args ${DBBAK_PREV#${DBBAK_BKDIR}/}/* \
				${DBBAK_CUR#${DBBAK_BKDIR}/}/* \
			2>/dev/null || true )
}

cmd_stat() {
	last_log=`
	( cd ${DBBAK_BKDIR} \
		&& ls -rt args ${PWD}/${DBBAK_PREV#${DBBAK_BKDIR}/}/*.log \
				${PWD}/${DBBAK_CUR#${DBBAK_BKDIR}/}/*.log \
			2>/dev/null |tail -n 1|| true )
	`;

	# looking for e.g. "180409 15:48:06 completed OK!"
	last_ok=`tail -n 1000 $last_log|grep '^[0-9].*completed'`;
	echo $last_ok;
}

cmd_trap() {
	zabbix_sender -z ${DBBAK_MONITOR_SERVER} \
		-s ${DBBAK_MONITOR_NAME} -k MySQL.backup-status \
		-o "`$0 stat`";
}

cmd_restore() {

	#
	# ensure db is shutdown
	#

	mysqladmin -S ${DBBAK_SOCKET} status >/dev/null 2>&1;
	if [ "$?" -eq "0" ]; then
		echo "$me: error: mysqld detected on socket ${DBBAK_SOCKET}."
		echo "$me: restore can only run on stopped instances."
		echo "$me: please verify host & stop server before proceeding."
		echo "$me: exiting."
		exit 1;
	fi

	#
	# locate available backups
	#
	# TODO: skip detection process if arg given

	set_incrs;

	base=""; # determine latest full backup
	for d in ${DBBAK_PREV_FULL} ${DBBAK_CUR_FULL}; do
	
		# should exist, be a directory, and the newest available.	
		[ -d "${d}" ] || continue;
		[ -z "${base}" ] && [ -d "${d}" ] && base="$d";
		[ "${base}" != "${d}" ] && [ "${d}" -nt "${base}" ] \
			&& base="$d";

	done

	if [ -z "${base}" ]; then
		echo "$me: no backups available for restore. exiting."
		exit 1;
	fi

 	if [ "${base}" = "${DBBAK_CUR_FULL}" ]; then
		incrbase="${DBBAK_CUR_INCRBASE}"
 		nincr="${DBBAK_CUR_MAX_INCR_NO}"
 	else
		incrbase="${DBBAK_PREV_INCRBASE}"
 		nincr="${DBBAK_PREV_MAX_INCR_NO}"
 	fi

	echo "$me: restore job on `hostname` at `date`"
	show_cfg; # TODO audit vars

	[ "$nincr" -eq "-1" ] && src=$base \
		|| src=${incrbase}.${nincr}

	echo "$me: will restore from $src (base: $base)"

	#
	# remove exisitng database
	#

	if [ -t 0 ]; then
		shibboleth="ALL YOUR BASE ARE BELONG TO US";

		echo "Warning!!!: Restore *DESTROYS* current databases!!!";
		echo "Please enter '$shibboleth'"
		echo "if you are *COMPLETELY SURE* you want to proceed."
		read response;

		if [ "$response" != "$shibboleth" ]; then 
			echo "restore aborted - response incorrect." 
			exit 1;
		fi
	fi

	echo "$me: path to be destroyed is: '${DBBAK_DBDIR}'"

	#
	# wipe/restore base full backup
	#

	do_countdown "wipe/recreate of ${DBBAK_DBDIR}"

	echo "$me: copying full backup from $base"
	rsync -avHSW --delete ${base}/ ${DBBAK_DBDIR}/

	echo "$me: appyling logs to full backup"

	# NOTE: --ibbackup=xtrabackup_56 reqd for 2.1.8-1 xtrabackup 
	# this also yields ignorable 'unknown flags 50' if db > 5.6.16
	# https://bugs.launchpad.net/percona-server/+bug/1302882

	innobackupex ${DBBAK_RESTORE_MEM} \
		--apply-log --redo-only ${DBBAK_DBDIR}/

	# 
	# restore incremental backups
	# 

 	if [ "$src" != "$base" ]; then
 		inc=0;
 		while [ "$inc" -le "$nincr" ]; do
 			echo "$me: restore incremental $inc of $nincr"
 			innobackupex ${DBBAK_RESTORE_MEM} \
 				--apply-log --redo-only ${DBBAK_DBDIR}/ \
 				--incremental-dir=${incrbase}.${inc}
 			inc=$((inc + 1))
 		done
 	fi

 	# apply final logs
	echo "$me: appyling final logs"
	innobackupex --apply-log ${DBBAK_DBDIR}/

	# set perms (implies perm settings in cfg)
	echo "$me: setting permissions"
	chown -R ${DBBAK_OWNER}:${DBBAK_GROUP} ${DBBAK_DBDIR}/
	chmod ${DBBAK_MODE} ${DBBAK_DBDIR}/
	echo "$me: done"
}

cmd_rotate() {

	if [ ! -d ${DBBAK_CUR_FULL} ]; then
		echo "$me: no full backup present in ${DBBAK_FULL}."
		echo "$me: please run '$me full' before proceeding."
		echo "$me: exiting."
		exit 1;
	fi
	if [ -d ${DBBAK_PREV_FULL} ]; then
		echo "$me: previous backup present in ${DBBAK_PREV}."
		echo "$me: please run '$me purge' before proceeding."
		echo "$me: exiting."
		exit 1;
	fi

	do_countdown "rotate";

	if [ ! -d "${DBBAK_PREV}" ]; then
		mkdir ${DBBAK_PREV} \
		|| err_exit "$me: problem creating ${DBBAK_PREV}. exiting.";
	fi

	for incr in ${DBBAK_CUR_INCR_NOS}; do

		DBBAK_ROTATE_CUR="${DBBAK_CUR_INCRBASE}.${incr}";
		DBBAK_ROTATE_CUR_LOG="${DBBAK_ROTATE_CUR}.log";
		DBBAK_ROTATE_CUR_STAMP="${DBBAK_ROTATE_CUR}.stamp";

		DBBAK_ROTATE_PREV="${DBBAK_PREV_INCRBASE}.${incr}";
		DBBAK_ROTATE_PREV_LOG="${DBBAK_ROTATE_PREV}.log";
		DBBAK_ROTATE_PREV_STAMP="${DBBAK_ROTATE_PREV}.stamp";

		echo -n "$me: moving ${DBBAK_ROTATE_CUR}: "

		mv ${DBBAK_ROTATE_CUR} ${DBBAK_ROTATE_PREV}
		[ "$?" -eq "0" ] || err_exit "ERROR!"

		mv ${DBBAK_ROTATE_CUR_LOG} ${DBBAK_ROTATE_PREV_LOG}
		[ "$?" -eq "0" ] || err_exit "ERROR!"

		mv ${DBBAK_ROTATE_CUR_STAMP} ${DBBAK_ROTATE_PREV_STAMP}
		[ "$?" -eq "0" ] || err_exit "ERROR!"

		echo "ok."

	done

	echo -n "$me: moving ${DBBAK_CUR_FULL}: "
	mv ${DBBAK_CUR_FULL} ${DBBAK_PREV_FULL}
	[ "$?" -eq "0" ] && echo "ok." || err_exit "ERROR!"

	echo -n "$me: moving ${DBBAK_CUR_FULL_LOG}: "
	mv ${DBBAK_CUR_FULL_LOG} ${DBBAK_PREV_FULL_LOG}
	[ "$?" -eq "0" ] && echo "ok." || err_exit "ERROR!"

	echo -n "$me: moving ${DBBAK_CUR_FULL_STAMP}: "
	mv ${DBBAK_CUR_FULL_STAMP} ${DBBAK_PREV_FULL_STAMP}
	[ "$?" -eq "0" ] && echo "ok." || err_exit "ERROR!"

}

cmd_purge() {
	if [ ! -d ${DBBAK_PREV} ]; then
		echo "$me: nothing to purge in in ${DBBAK_PREV}."
		echo "$me: please run '$me rotate' before proceeding."
		echo "$me: exiting."
		exit 1;
	fi

	do_countdown "purge";

	for incr in ${DBBAK_PREV_INCR_NOS}; do

		DBBAK_ROTATE_PREV="${DBBAK_PREV_INCRBASE}.${incr}";
		DBBAK_ROTATE_PREV_LOG="${DBBAK_ROTATE_PREV}.log";
		DBBAK_ROTATE_PREV_STAMP="${DBBAK_ROTATE_PREV}.stamp";

		echo -n "$me: removing ${DBBAK_ROTATE_PREV}: "
		rm -rf ${DBBAK_ROTATE_PREV} ${DBBAK_ROTATE_PREV_LOG} \
			${DBBAK_ROTATE_PREV_STAMP}

		[ "$?" -eq "0" ] && echo "ok." || err_exit "ERROR!"
	done

	echo -n "$me: removing ${DBBAK_PREV_FULL}: "
	rm -rf ${DBBAK_PREV_FULL} ${DBBAK_PREV_FULL_LOG} \
		${DBBAK_PREV_FULL_STAMP}
	[ "$?" -eq "0" ] && echo "ok." || echo "ERROR!"
}


# _start:
me="`basename $0`"
if [ "$#" -lt "1" ]; then
	usage_exit;
fi

verb=$1; shift;
case $verb in
	"full") parse_cfg; cmd_full;;
	"incremental") parse_cfg; cmd_incremental;;
	"lvmsnap") parse_cfg; cmd_lvmsnap;;
	"lvmls") parse_cfg; cmd_lvmls;;
	"lvmpurge") parse_cfg; cmd_lvmpurge;;
	"ls") parse_cfg; cmd_ls $*;;
	"stat") parse_cfg; cmd_stat $*;;
	"trap") parse_cfg; cmd_trap $*;;
	"restore") parse_cfg; cmd_restore $*;;
	"rotate") parse_cfg; cmd_rotate;;
	"purge") parse_cfg; cmd_purge;;
	*) usage_exit;;
esac
